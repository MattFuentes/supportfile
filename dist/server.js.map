{"version":3,"file":"server.js","mappings":"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","sources":["webpack://qamatt/./src/server/TeamsAppsComponents.ts?6a42","webpack://qamatt/./src/server/qaMattMessageExtensionBot/QaMattMessageExtensionBot.ts?a4d9","webpack://qamatt/./src/server/qaMattMessageExtensionBot/cards/welcomeCard.ts?54cb","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogBot.ts?908e","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/helpDialog.ts?abe5","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/ivr1Example.ts?c49b","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/ivr2Example.ts?d6e8","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/ivrExample.ts?20bb","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/mainDialog.ts?b1da","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/mentionUserDialog.ts?a382","webpack://qamatt/./src/server/qaMattMessageExtensionBot/dialogs/teamsInfoDialog.ts?f5f6","webpack://qamatt/./src/server/qaMattMessageExtension/QaMattMessageExtension.ts?9c5d","webpack://qamatt/./src/server/qaMattTab/QaMattTab.ts?4ff1","webpack://qamatt/external commonjs \"botbuilder\"?9bd5","webpack://qamatt/external commonjs \"botbuilder-dialogs\"?0e7e","webpack://qamatt/external commonjs \"compression\"?e0c2","webpack://qamatt/external commonjs \"debug\"?b525","webpack://qamatt/external commonjs \"dotenv\"?3fba","webpack://qamatt/external commonjs \"express\"?c4a6","webpack://qamatt/external commonjs \"express-msteams-host\"?eac2","webpack://qamatt/external commonjs \"morgan\"?66c0","webpack://qamatt/external node-commonjs \"http\"?78d4","webpack://qamatt/external node-commonjs \"path\"?1f34","[]","webpack://qamatt/./src/server/server.ts?3175"],"sourcesContent":["// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the qaMattTab tab\nexport * from \"./qaMattTab/QaMattTab\";\n// Automatically added for the qaMattMessageExtensionBot bot\nexport * from \"./qaMattMessageExtensionBot/QaMattMessageExtensionBot\";\n","import { BotDeclaration, PreventIframe, MessageExtensionDeclaration } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { TeamsActivityHandler, StatePropertyAccessor, ActivityTypes, CardFactory, ConversationState, MemoryStorage, UserState, TurnContext } from \"botbuilder\";\nimport { DialogBot } from \"./dialogBot\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\nimport WelcomeCard from \"./cards/welcomeCard\";\nimport QaMattMessageExtension from \"../qaMattMessageExtension/QaMattMessageExtension\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for qa-matt Message Extension Bot\n */\n@BotDeclaration(\n    \"/api/messages\",\n    new MemoryStorage(),\n    // eslint-disable-next-line no-undef\n    process.env.MICROSOFT_APP_ID,\n    // eslint-disable-next-line no-undef\n    process.env.MICROSOFT_APP_PASSWORD)\n@PreventIframe(\"/qaMattMessageExtensionBot/aboutQaMatt.html\")\nexport class QaMattMessageExtensionBot extends DialogBot {\n    constructor(conversationState: ConversationState, userState: UserState) {\n        super(conversationState, userState, new MainDialog());\n        // Message extension QaMattMessageExtension\n        this._qaMattMessageExtension = new QaMattMessageExtension();\n\n        this.onMembersAdded(async (context, next) => {\n            const membersAdded = context.activity.membersAdded;\n            if (membersAdded && membersAdded.length > 0) {\n                for (let cnt = 0; cnt < membersAdded.length; cnt++) {\n                    if (membersAdded[cnt].id !== context.activity.recipient.id) {\n                        await this.sendWelcomeCard(context);\n                    }\n                }\n            }\n            await next();\n        });\n    }\n\n    /** Local property for QaMattMessageExtension */\n    @MessageExtensionDeclaration(\"qaMattMessageExtension\")\n    private _qaMattMessageExtension: QaMattMessageExtension;\n\n    public async sendWelcomeCard(context: TurnContext): Promise<void> {\n        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n        await context.sendActivity({ attachments: [welcomeCard] });\n    }\n\n}\n","const WelcomeCard = require(\"./welcomeCard.json\");\nexport default WelcomeCard;\n","import {\n    ConversationState,\n    UserState,\n    TeamsActivityHandler,\n    TurnContext\n} from \"botbuilder\";\nimport { MainDialog } from \"./dialogs/mainDialog\";\n\nexport class DialogBot extends TeamsActivityHandler {\n    public dialogState: any;\n\n    constructor(public conversationState: ConversationState, public userState: UserState, public dialog: MainDialog) {\n        super();\n        this.conversationState = conversationState;\n        this.userState = userState;\n        this.dialog = dialog;\n        this.dialogState = this.conversationState.createProperty(\"DialogState\");\n\n        this.onMessage(async (context, next) => {\n            // Run the MainDialog with the new message Activity.\n            await this.dialog.run(context, this.dialogState);\n            await next();\n        });\n    }\n\n    public async run(context: TurnContext) {\n        await super.run(context);\n        // Save any state changes. The load happened during the execution of the Dialog.\n        await this.conversationState.saveChanges(context, false);\n        await this.userState.saveChanges(context, false);\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst HELP_DIALOG_ID = \"helpDialog\";\nconst HELP_WATERFALL_DIALOG_ID = \"helpWaterfallDialog\";\n\nexport class HelpDialog extends ComponentDialog {\n    constructor() {\n        super(HELP_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(HELP_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = HELP_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Esta sección esta en desarrollo!\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst IVR_DIALOG_ID = \"ivr1Dialog\";\nconst IVR_WATERFALL_DIALOG_ID = \"ivrWaterfallDialog\";\n\nexport class Ivr1Example extends ComponentDialog {\n    constructor() {\n        super(IVR_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(IVR_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = IVR_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Opcion 1.\\nMicrosoft Teams es una plataforma unificada de comunicación y colaboración que combina chat persistente en el lugar de trabajo, reuniones de video, almacenamiento de archivos e integración de aplicaciones.\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext,\n    CardFactory\n} from \"botbuilder\";\nimport WelcomeCard from \"../cards/welcomeCard\";\n\nconst IVR_DIALOG_ID = \"ivr2Dialog\";\nconst IVR_WATERFALL_DIALOG_ID = \"ivrWaterfallDialog\";\n\nexport class Ivr2Example extends ComponentDialog {\n    constructor() {\n        super(IVR_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(IVR_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = IVR_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        await this.sendWelcomeCard(context);\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n    public async sendWelcomeCard(context: TurnContext): Promise<void> {\n        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n        await context.sendActivity({ attachments: [welcomeCard] });\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Opcion 2.\\nGrupo Desarrollo parte de Newtech\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst IVR_DIALOG_ID = \"ivrDialog\";\nconst IVR_WATERFALL_DIALOG_ID = \"ivrWaterfallDialog\";\n\nexport class IvrExample extends ComponentDialog {\n    constructor() {\n        super(IVR_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(IVR_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = IVR_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const message = MessageFactory.text(\"Este es un ejemplo de IVR\\n - 1. ¿Que es MS Teams?\\n - 2. ¿I + D?\");\n        await stepContext.context.sendActivity(message);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    InputHints,\n    TurnContext\n} from \"botbuilder\";\nimport { TeamsInfoDialog } from \"./teamsInfoDialog\";\nimport { HelpDialog } from \"./helpDialog\";\nimport { MentionUserDialog } from \"./mentionUserDialog\";\nimport { IvrExample } from \"./ivrExample\";\nimport { Ivr1Example } from \"./ivr1Example\";\nimport { Ivr2Example } from \"./ivr2Example\";\n\nconst MAIN_DIALOG_ID = \"mainDialog\";\nconst MAIN_WATERFALL_DIALOG_ID = \"mainWaterfallDialog\";\n\nexport class MainDialog extends ComponentDialog {\n    public onboarding: boolean;\n    constructor() {\n        super(MAIN_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new TeamsInfoDialog())\n            .addDialog(new HelpDialog())\n            .addDialog(new IvrExample())\n            .addDialog(new Ivr1Example())\n            .addDialog(new Ivr2Example())\n            .addDialog(new MentionUserDialog())\n            .addDialog(new WaterfallDialog(MAIN_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = MAIN_WATERFALL_DIALOG_ID;\n        this.onboarding = false;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if ((stepContext.options as any).restartMsg) {\n            const messageText = (stepContext.options as any).restartMsg ? (stepContext.options as any).restartMsg : \"En que te puedo ayudar?\";\n            const promptMessage = MessageFactory.text(messageText, messageText, InputHints.ExpectingInput);\n            return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n        } else {\n            this.onboarding = true;\n            return await stepContext.next();\n        }\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            /*\n            ** This is where you would add LUIS to your bot, see this link for more information:\n            ** https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-howto-v4-luis?view=azure-bot-service-4.0&tabs=javascript\n            */\n            const result = stepContext.result.trim().toLocaleLowerCase();\n            switch (result) {\n                case \"who\" :\n                case \"who am i?\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"ayuda\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"ivr\": {\n                    return await stepContext.beginDialog(\"ivrDialog\");\n                }\n                case \"1\": {\n                    return await stepContext.beginDialog(\"ivr1Dialog\");\n                }\n                case \"2\": {\n                    return await stepContext.beginDialog(\"ivr2Dialog\");\n                }\n                case \"menciona me\":\n                case \"mencion\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"No entendi tu pregunta, vuelve a escribirlo por favor!\");\n                    return await stepContext.next();\n                }\n            }\n        } else if (this.onboarding) {\n            switch (stepContext.context.activity.text) {\n                case \"who\": {\n                    return await stepContext.beginDialog(\"teamsInfoDialog\");\n                }\n                case \"ayuda\": {\n                    return await stepContext.beginDialog(\"helpDialog\");\n                }\n                case \"mencion\": {\n                    return await stepContext.beginDialog(\"mentionUserDialog\");\n                }\n                case \"ivr\": {\n                    return await stepContext.beginDialog(\"ivrDialog\");\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"No entendi tu pregunta, vuelve a escribirlo por favor!\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        return await stepContext.replaceDialog(this.initialDialogId, { restartMsg: \"En que te puedo ayudar?\" });\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TurnContext\n} from \"botbuilder\";\n\nconst MENTION_DIALOG_ID = \"mentionUserDialog\";\nconst MENTION_WATERFALL_DIALOG_ID = \"mentionUserWaterfallDialog\";\n\nexport class MentionUserDialog extends ComponentDialog {\n    constructor() {\n        super(MENTION_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(MENTION_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this)\n            ]));\n        this.initialDialogId = MENTION_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const mention = {\n            mentioned: stepContext.context.activity.from,\n            text: `<at>${new TextEncoder().encode(stepContext.context.activity.from.name)}</at>`,\n            type: \"mention\"\n        };\n        const replyActivity = MessageFactory.text(`Hola de nuevo ${mention.text}!`);\n        replyActivity.entities = [mention];\n        await stepContext.context.sendActivity(replyActivity);\n        return await stepContext.endDialog();\n    }\n}\n","import {\n    ComponentDialog,\n    DialogSet,\n    DialogState,\n    DialogTurnResult,\n    DialogTurnStatus,\n    TextPrompt,\n    WaterfallDialog,\n    WaterfallStepContext\n} from \"botbuilder-dialogs\";\nimport {\n    MessageFactory,\n    StatePropertyAccessor,\n    TeamsInfo,\n    TurnContext\n} from \"botbuilder\";\n\nconst TEAMS_INFO_DIALOG_ID = \"teamsInfoDialog\";\nconst TEAMS_INFO_WATERFALL_DIALOG_ID = \"teamsInfoWaterfallDialog\";\nlet teamsUserInfo;\n\nexport class TeamsInfoDialog extends ComponentDialog {\n    constructor() {\n        super(TEAMS_INFO_DIALOG_ID);\n        this.addDialog(new TextPrompt(\"TextPrompt\"))\n            .addDialog(new WaterfallDialog(TEAMS_INFO_WATERFALL_DIALOG_ID, [\n                this.introStep.bind(this),\n                this.actStep.bind(this),\n                this.finalStep.bind(this)\n            ]));\n        this.initialDialogId = TEAMS_INFO_WATERFALL_DIALOG_ID;\n    }\n\n    public async run(context: TurnContext, accessor: StatePropertyAccessor<DialogState>) {\n        const dialogSet = new DialogSet(accessor);\n        dialogSet.add(this);\n        const dialogContext = await dialogSet.createContext(context);\n        const results = await dialogContext.continueDialog();\n        if (results.status === DialogTurnStatus.empty) {\n            await dialogContext.beginDialog(this.id);\n        }\n    }\n\n    private async introStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        const promptMessage = MessageFactory.text(\"Do you want me to send you the current Teams member info?\\n\\nSay **yes** if you do like to see the context or **no** if you don't\");\n        return await stepContext.prompt(\"TextPrompt\", { prompt: promptMessage });\n    }\n\n    private async actStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        if (stepContext.result) {\n            const result = stepContext.result;\n            switch (result) {\n                case \"yes\": {\n                    teamsUserInfo = await TeamsInfo.getMember(stepContext.context, stepContext.context.activity.from.id);\n                    await stepContext.context.sendActivity(`Your name: **${teamsUserInfo.name}**\\n\\nYour Teams ID: **${teamsUserInfo.id}**\\n\\nYour email: **${teamsUserInfo.email}**`);\n                    break;\n                }\n                default: {\n                    await stepContext.context.sendActivity(\"Ok, maybe next time 😉\");\n                    return await stepContext.next();\n                }\n            }\n        }\n        return await stepContext.next();\n    }\n\n    private async finalStep(stepContext: WaterfallStepContext): Promise<DialogTurnResult> {\n        await stepContext.context.sendActivity(\"Now it's time to add more functionality to your bot, so head over to the [docs](https://aka.ms/yoTeams) and start building\");\n        return await stepContext.endDialog();\n    }\n}\n","import * as debug from \"debug\";\nimport { PreventIframe } from \"express-msteams-host\";\nimport { TurnContext, CardFactory, MessagingExtensionQuery, MessagingExtensionResult, TaskModuleRequest, TaskModuleContinueResponse } from \"botbuilder\";\nimport { IMessagingExtensionMiddlewareProcessor } from \"botbuilder-teams-messagingextensions\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n@PreventIframe(\"/qaMattMessageExtension/config.html\")\n@PreventIframe(\"/qaMattMessageExtension/action.html\")\nexport default class QaMattMessageExtension implements IMessagingExtensionMiddlewareProcessor {\n\n    public async onFetchTask(context: TurnContext, value: MessagingExtensionQuery): Promise<MessagingExtensionResult | TaskModuleContinueResponse> {\n\n        return Promise.resolve<TaskModuleContinueResponse>({\n            type: \"continue\",\n            value: {\n                title: \"Input form\",\n                card: CardFactory.adaptiveCard({\n                    $schema: \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                    type: \"AdaptiveCard\",\n                    version: \"1.4\",\n                    body: [\n                        {\n                            type: \"TextBlock\",\n                            text: \"Please enter an e-mail address\"\n                        },\n                        {\n                            type: \"Input.Text\",\n                            id: \"email\",\n                            placeholder: \"somemail@example.com\",\n                            style: \"email\"\n                        },\n                        {\n                            type: \"ActionSet\",\n                            actions: [\n                                {\n                                    type: \"Action.Execute\",\n                                    title: \"OK\",\n                                    data: { id: \"unique-id\" },\n                                    fallback: \"Action.Submit\"\n                                }\n                            ]\n                        }\n                    ]\n                })\n            }\n        });\n    }\n\n    // handle action response in here\n    // See documentation for `MessagingExtensionResult` for details\n    public async onSubmitAction(context: TurnContext, value: TaskModuleRequest): Promise<MessagingExtensionResult> {\n\n        const card = CardFactory.adaptiveCard(\n            {\n                type: \"AdaptiveCard\",\n                body: [\n                    {\n                        type: \"TextBlock\",\n                        size: \"Large\",\n                        text: value.data.email\n                    },\n                    {\n                        type: \"Image\",\n                        url: `https://randomuser.me/api/portraits/thumb/women/${Math.round(Math.random() * 100)}.jpg`\n                    }\n                ],\n                $schema: \"http://adaptivecards.io/schemas/adaptive-card.json\",\n                version: \"1.4\"\n            });\n        return Promise.resolve({\n            type: \"result\",\n            attachmentLayout: \"list\",\n            attachments: [card]\n        } as MessagingExtensionResult);\n    }\n\n    // this is used when canUpdateConfiguration is set to true\n    public async onQuerySettingsUrl(context: TurnContext): Promise<{ title: string, value: string }> {\n        return Promise.resolve({\n            title: \"qa-matt Message Extension Configuration\",\n            value: `https://${process.env.PUBLIC_HOSTNAME}/qaMattMessageExtension/config.html?name={loginHint}&tenant={tid}&group={groupId}&theme={theme}`\n        });\n    }\n\n    public async onSettings(context: TurnContext): Promise<void> {\n        // take care of the setting returned from the dialog, with the value stored in state\n        const setting = context.activity.value.state;\n        log(`New setting: ${setting}`);\n        return Promise.resolve();\n    }\n\n}\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/qaMattTab/index.html\")\nexport class QaMattTab {\n}\n","module.exports = require(\"botbuilder\");","module.exports = require(\"botbuilder-dialogs\");","module.exports = require(\"compression\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-msteams-host\");","module.exports = require(\"morgan\");","module.exports = require(\"http\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(\"Initializing Microsoft Teams Express hosted App...\");\n\n// Initialize dotenv, to use .env file settings if existing\nrequire(\"dotenv\").config();\n\n// The import of components has to be done AFTER the dotenv config\n// eslint-disable-next-line import/first\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n"],"names":["nonce","debug","QaMattMessageExtensionBot","DialogBot","constructor","conversationState","userState","super","MainDialog","this","_qaMattMessageExtension","onMembersAdded","context","next","membersAdded","activity","length","cnt","id","recipient","sendWelcomeCard","welcomeCard","CardFactory","adaptiveCard","sendActivity","attachments","MessageExtensionDeclaration","BotDeclaration","MemoryStorage","process","env","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","PreventIframe","WelcomeCard","TeamsActivityHandler","dialog","dialogState","createProperty","onMessage","run","saveChanges","HELP_WATERFALL_DIALOG_ID","HelpDialog","ComponentDialog","addDialog","TextPrompt","WaterfallDialog","introStep","bind","initialDialogId","accessor","dialogSet","DialogSet","add","dialogContext","createContext","continueDialog","status","DialogTurnStatus","empty","beginDialog","stepContext","message","MessageFactory","text","endDialog","IVR_WATERFALL_DIALOG_ID","Ivr1Example","Ivr2Example","results","IvrExample","MAIN_WATERFALL_DIALOG_ID","TeamsInfoDialog","MentionUserDialog","actStep","finalStep","onboarding","options","restartMsg","messageText","promptMessage","InputHints","ExpectingInput","prompt","result","trim","toLocaleLowerCase","replaceDialog","MENTION_WATERFALL_DIALOG_ID","mention","mentioned","from","TextEncoder","encode","name","type","replyActivity","entities","TEAMS_INFO_WATERFALL_DIALOG_ID","teamsUserInfo","TeamsInfo","getMember","email","log","QaMattMessageExtension","onFetchTask","value","Promise","resolve","title","card","$schema","version","body","placeholder","style","actions","data","fallback","onSubmitAction","size","url","Math","round","random","attachmentLayout","onQuerySettingsUrl","PUBLIC_HOSTNAME","onSettings","setting","state","QaMattTab","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","express","Express","port","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen"],"sourceRoot":""}